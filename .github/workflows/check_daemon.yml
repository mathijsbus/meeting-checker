name: Check meeting page (daemon)

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "TEST-modus: stuur push bij GEEN verandering (1=aan, 0=uit)"
        required: false
        default: "0"
      loops:
        description: "Aantal checks in deze run (voor testen 1)"
        required: false
        default: "1"
  schedule:
    - cron: "0 */6 * * *"

permissions:
  contents: write
  actions: write

concurrency:
  group: meeting-checker-daemon
  cancel-in-progress: true

jobs:
  loop:
    runs-on: ubuntu-latest
    timeout-minutes: 60   # test-run hoeft geen 6 uur meer

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Install Playwright browsers
        run: python -m playwright install --with-deps chromium

      - name: Run checks (one-shot friendly) + Playwright
        env:
          # secrets
          LOGIN_URL: ${{ secrets.LOGIN_URL }}
          TARGET_URL: ${{ secrets.TARGET_URL }}
          SITE_USERNAME: ${{ secrets.SITE_USERNAME }}
          SITE_PASSWORD: ${{ secrets.SITE_PASSWORD }}
          USERNAME_FIELD: ${{ secrets.USERNAME_FIELD }}
          PASSWORD_FIELD: ${{ secrets.PASSWORD_FIELD }}
          EXTRA_FIELDS_JSON: ${{ secrets.EXTRA_FIELDS_JSON }}
          TEXT_TO_FIND: ${{ secrets.TEXT_TO_FIND }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          JITTER_SECONDS_MAX: "10"
          # variables
          EXPECTED_HOST: ${{ vars.EXPECTED_HOST }}
          EXPECTED_PATH: ${{ vars.EXPECTED_PATH }}
          CONFIRM_TEXT:  ${{ vars.CONFIRM_TEXT }}
          CSS_SELECTOR:  ${{ vars.CSS_SELECTOR }}
          DEBUG_SNAPSHOT: ${{ vars.DEBUG_SNAPSHOT }}
          # Playwright
          USE_PLAYWRIGHT: "1"
          LOGIN_USERNAME_SELECTOR: ${{ vars.LOGIN_USERNAME_SELECTOR }}
          LOGIN_PASSWORD_SELECTOR: ${{ vars.LOGIN_PASSWORD_SELECTOR }}
          LOGIN_SUBMIT_SELECTOR:   ${{ vars.LOGIN_SUBMIT_SELECTOR }}
          # Quiet hours (blijft actief, maar je kiest zelf wanneer je runt)
          QUIET_TZ: "Europe/Amsterdam"
          QUIET_START: "00:00"
          QUIET_END:   "06:32"
          # Random sleep
          MIN_SLEEP_SEC: "60"
          MAX_SLEEP_SEC: "300"
          # Test mode + aantal loops
          INPUT_TEST_MODE: ${{ github.event.inputs.test_mode }}
          VARS_TEST_MODE:  ${{ vars.TEST_MODE }}
          LOOPS: ${{ github.event.inputs.loops }}
        shell: bash
        run: |
          set -e

          # ------ helpers ------
          random_sleep () {
            local min="${MIN_SLEEP_SEC:-60}"
            local max="${MAX_SLEEP_SEC:-300}"
            local dur
            if [ "$max" -le "$min" ]; then dur="$min"; else
              local range=$((max - min + 1))
              local offset=$(( RANDOM % range ))
              dur=$(( min + offset ))
            fi
            echo "Sleeping ${dur}s before next check..."
            sleep "$dur"
          }

          sleep_until_quiet_end () {
            NOW_NUM=$(TZ=$QUIET_TZ date +%H%M)
            END_NUM=$(echo "$QUIET_END" | tr -d :)
            if [ "$NOW_NUM" -lt "$END_NUM" ]; then day="today"; else day="tomorrow"; fi
            end_ts=$(TZ=$QUIET_TZ date -d "$day $QUIET_END" +%s)
            now_ts=$(date +%s)
            sleep_for=$(( end_ts - now_ts ))
            if [ $sleep_for -gt 0 ]; then
              echo "Quiet hours ($QUIET_START-$QUIET_END $QUIET_TZ). Sleeping $sleep_for s..."
              sleep $sleep_for
            fi
          }

          is_in_quiet () {
            NOW=$(TZ=$QUIET_TZ date +%H%M)
            START=$(echo "$QUIET_START" | tr -d :)
            ENDHM=$(echo "$QUIET_END" | tr -d :)
            if [ "$START" -le "$ENDHM" ]; then
              [ "$NOW" -ge "$START" ] && [ "$NOW" -lt "$ENDHM" ]
            else
              [ "$NOW" -ge "$START" ] || [ "$NOW" -lt "$ENDHM" ]
            fi
          }

          TEST_MODE="${INPUT_TEST_MODE:-${VARS_TEST_MODE:-0}}"
          echo "TEST_MODE=${TEST_MODE}"
          echo "DEBUG_SNAPSHOT=$DEBUG_SNAPSHOT  USE_PLAYWRIGHT=$USE_PLAYWRIGHT"
          python -c 'import os; print("PY DEBUG_SNAPSHOT =", os.getenv("DEBUG_SNAPSHOT")); print("PY USE_PLAYWRIGHT =", os.getenv("USE_PLAYWRIGHT"))'

          git config user.email "actions@users.noreply.github.com"
          git config user.name "github-actions"

          max_loops="${LOOPS:-1}"
          if ! [[ "$max_loops" =~ ^[0-9]+$ ]]; then max_loops=1; fi
          i=1

          while [ $i -le $max_loops ]; do
            if is_in_quiet; then sleep_until_quiet_end; fi

            echo "::group::check $i / $max_loops @ $(date -u +%F'T'%T'Z')"
            rm -f last_response.html last_response.png || true

            python checker.py | tee run.log || true

            # Fallback: forceer een snapshot-bestand voor upload/debug
            if [ "${DEBUG_SNAPSHOT}" = "1" ] && [ ! -f last_response.html ]; then
              {
                echo "<html><body>"
                echo "<h3>No HTML snapshot created by checker.py</h3>"
                echo "<p>See run.log included in the artifact for details.</p>"
                echo "</body></html>"
              } > last_response.html
              echo "Created fallback last_response.html"
            fi

            # Toon even wat er ligt
            echo "---- ls -la ----"
            ls -la | sed -n '1,200p'
            echo "---------------"

            # Commit state.json alleen bij wijziging
            if grep -q "STATE_CHANGED=1" run.log; then
              git pull --rebase || true
              git add state.json
              git commit -m "Update state [skip ci]" || true
              git push || true
            fi
            echo "::endgroup::"

            # TEST-mode heartbeat als géén verandering
            if [ "$TEST_MODE" = "1" ] || [ "$TEST_MODE" = "true" ] || [ "$TEST_MODE" = "yes" ]; then
              if ! grep -q "STATE_CHANGED=1" run.log; then
                STATUS_LINE=$(grep -E '^Status:' run.log | tail -n1 || true)
                STATUS_TEXT="${STATUS_LINE#Status: }"
                MSG="[TEST] Geen verandering (${STATUS_TEXT:-onbekend}) @ $(date -u +%F' '%T) UTC"
                curl -sS -X POST \
                  -d "chat_id=${TELEGRAM_CHAT_ID}" \
                  -d "text=${MSG}" \
                  "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" >/dev/null || true
              fi
            fi

            if [ $i -lt $max_loops ]; then random_sleep; fi
            i=$((i+1))
          done

      - name: Upload snapshot + log (if present)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: last_response
          path: |
            last_response.html
            last_response.png
            run.log
          if-no-files-found: ignore
