name: Check meeting page (daemon)

on:
  workflow_dispatch: {}           # handmatig starten
  schedule:
    - cron: "0 */6 * * *"         # back-up start elke 6 uur (voor het geval self-dispatch faalt)

permissions:
  contents: write                 # voor state.json commits
  actions: write                  # om zichzelf opnieuw te starten

concurrency:
  group: meeting-checker-daemon
  cancel-in-progress: true

jobs:
  loop:
    runs-on: ubuntu-latest
    timeout-minutes: 355          # ~5u55 (GitHub-hosted limiet is ~6u)

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Run loop with quiet hours + random interval
        env:
          # --- jouw checker envs ---
          LOGIN_URL: ${{ secrets.LOGIN_URL }}
          TARGET_URL: ${{ secrets.TARGET_URL }}
          SITE_USERNAME: ${{ secrets.SITE_USERNAME }}
          SITE_PASSWORD: ${{ secrets.SITE_PASSWORD }}
          USERNAME_FIELD: ${{ secrets.USERNAME_FIELD }}
          PASSWORD_FIELD: ${{ secrets.PASSWORD_FIELD }}
          EXTRA_FIELDS_JSON: ${{ secrets.EXTRA_FIELDS_JSON }}
          TEXT_TO_FIND: ${{ secrets.TEXT_TO_FIND }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          JITTER_SECONDS_MAX: "10"

          # --- stille uren ---
          QUIET_TZ: "Europe/Amsterdam"
          QUIET_START: "00:00"
          QUIET_END:   "06:32"

          # --- random interval (aanpasbaar) ---
          MIN_SLEEP_SEC: "60"     # 1 minuut
          MAX_SLEEP_SEC: "300"    # 5 minuten
        run: |
          set -e
          END=$(( $(date +%s) + 20700 ))   # ~5u45 (5*3600 + 45*60)

          git config user.email "actions@users.noreply.github.com"
          git config user.name "github-actions"

          # hulpfuncties
          random_sleep () {
            local min="${MIN_SLEEP_SEC:-60}"
            local max="${MAX_SLEEP_SEC:-300}"
            local dur
            if [ "$max" -le "$min" ]; then
              dur="$min"
            else
              local range=$((max - min + 1))
              local offset=$(( RANDOM % range ))
              dur=$(( min + offset ))
            fi
            echo "üïí Sleeping ${dur}s before next check..."
            sleep "$dur"
          }

          sleep_until_quiet_end () {
            NOW_NUM=$(TZ=$QUIET_TZ date +%H%M)
            END_NUM=$(echo "$QUIET_END" | tr -d :)
            if [ "$NOW_NUM" -lt "$END_NUM" ]; then
              day="today"
            else
              day="tomorrow"
            fi
            end_ts=$(TZ=$QUIET_TZ date -d "$day $QUIET_END" +%s)
            now_ts=$(date +%s)
            sleep_for=$(( end_ts - now_ts ))
            if [ $sleep_for -gt 0 ]; then
              echo "‚è∏  Quiet hours ($QUIET_START‚Äì$QUIET_END $QUIET_TZ). Sleeping $sleep_for s until $day $QUIET_END $QUIET_TZ‚Ä¶"
              sleep $sleep_for
            fi
          }

          is_in_quiet () {
            NOW=$(TZ=$QUIET_TZ date +%H%M)
            START=$(echo "$QUIET_START" | tr -d :)
            ENDHM=$(echo "$QUIET_END" | tr -d :)
            if [ "$START" -le "$ENDHM" ]; then
              # normaal venster (bijv. 00:00‚Äì06:32)
              [ "$NOW" -ge "$START" ] && [ "$NOW" -lt "$ENDHM" ]
            else
              # venster over middernacht (bijv. 22:00‚Äì06:32)
              [ "$NOW" -ge "$START" ] || [ "$NOW" -lt "$ENDHM" ]
            fi
          }

          while [ $(date +%s) -lt $END ]; do
            if is_in_quiet; then
              sleep_until_quiet_end
              continue
            fi

            echo "::group::check $(date -u +%F'T'%T'Z')"
            python checker.py | tee run.log || true

            # commit alleen bij status-wijziging
            if grep -q "STATE_CHANGED=1" run.log; then
              git pull --rebase || true
              git add state.json
              git commit -m "Update state [skip ci]" || true
              git push || true
            fi
            echo "::endgroup::"

            random_sleep   # <‚Äî random 60‚Äì300s
          done

      - name: Self-dispatch next daemon run
        if: always()
        env:
          GH_OWNER_REPO: ${{ github.repository }}
          GH_TOKEN: ${{ github.token }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          curl -sS -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            https://api.github.com/repos/$GH_OWNER_REPO/actions/workflows/check_daemon.yml/dispatches \
            -d '{"ref":"'"$REF_NAME"'"}' || true
