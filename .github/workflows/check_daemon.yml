name: Check meeting page (daemon)

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "TEST-modus: stuur push bij GEEN verandering (1=aan, 0=uit)"
        required: false
        default: "0"
      test_loop:
        description: "TEST-loop: maar 1 check (1=aan, 0=uit)"
        required: false
        default: "0"
  schedule:
    - cron: "0 */6 * * *" # backup trigger

permissions:
  contents: write
  actions: write

concurrency:
  group: meeting-checker-daemon
  cancel-in-progress: true

jobs:
  loop:
    runs-on: ubuntu-latest
    timeout-minutes: 330

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: pip install -r requirements.txt

      - name: Install Playwright
        run: python -m playwright install --with-deps chromium

      - name: Run (test of daemon)
        env:
          # --- secrets ---
          LOGIN_URL: ${{ secrets.LOGIN_URL }}
          TARGET_URL: ${{ secrets.TARGET_URL }}
          SITE_USERNAME: ${{ secrets.SITE_USERNAME }}
          SITE_PASSWORD: ${{ secrets.SITE_PASSWORD }}
          USERNAME_FIELD: ${{ secrets.USERNAME_FIELD }}
          PASSWORD_FIELD: ${{ secrets.PASSWORD_FIELD }}
          EXTRA_FIELDS_JSON: ${{ secrets.EXTRA_FIELDS_JSON }}
          TEXT_TO_FIND: ${{ secrets.TEXT_TO_FIND }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}

          # --- variables ---
          EXPECTED_HOST: ${{ vars.EXPECTED_HOST }}
          EXPECTED_PATH: ${{ vars.EXPECTED_PATH }}
          CONFIRM_TEXT:  ${{ vars.CONFIRM_TEXT }}
          CSS_SELECTOR:  ${{ vars.CSS_SELECTOR }}
          DEBUG_SNAPSHOT: ${{ vars.DEBUG_SNAPSHOT }}

          # login selector overrides (optioneel)
          LOGIN_USERNAME_SELECTOR: ${{ vars.LOGIN_USERNAME_SELECTOR }}
          LOGIN_PASSWORD_SELECTOR: ${{ vars.LOGIN_PASSWORD_SELECTOR }}
          LOGIN_SUBMIT_SELECTOR:   ${{ vars.LOGIN_SUBMIT_SELECTOR }}

          # --- gedrag ---
          USE_PLAYWRIGHT: "1"            # zet op "0" als je requests-fallback wilt forceren
          MIN_SLEEP_SEC: "60"
          MAX_SLEEP_SEC: "300"
          QUIET_TZ: "Europe/Amsterdam"
          QUIET_START: "00:07"
          QUIET_END:   "06:28"

          # --- inputs ---
          INPUT_TEST_MODE: ${{ github.event.inputs.test_mode }}
          INPUT_TEST_LOOP: ${{ github.event.inputs.test_loop }}
        shell: bash
        run: |
          set -e

          random_sleep () {
            local min="${MIN_SLEEP_SEC:-60}"
            local max="${MAX_SLEEP_SEC:-300}"
            local dur
            if [ "$max" -le "$min" ]; then dur="$min"; else
              local range=$((max - min + 1))
              local offset=$(( RANDOM % range ))
              dur=$(( min + offset ))
            fi
            echo "Sleeping ${dur}s before next check..."
            sleep "$dur"
          }

          in_quiet () {
            NOW=$(TZ=$QUIET_TZ date +%H%M)
            START=$(echo "$QUIET_START" | tr -d :)
            ENDHM=$(echo "$QUIET_END" | tr -d :)
            if [ "$START" -le "$ENDHM" ]; then
              [ "$NOW" -ge "$START" ] && [ "$NOW" -lt "$ENDHM" ]
            else
              [ "$NOW" -ge "$START" ] || [ "$NOW" -lt "$ENDHM" ]
            fi
          }

          sleep_until_quiet_end () {
            NOW_NUM=$(TZ=$QUIET_TZ date +%H%M)
            END_NUM=$(echo "$QUIET_END" | tr -d :)
            if [ "$NOW_NUM" -lt "$END_NUM" ]; then day="today"; else day="tomorrow"; fi
            end_ts=$(TZ=$QUIET_TZ date -d "$day $QUIET_END" +%s)
            now_ts=$(date +%s)
            wait=$(( end_ts - now_ts ))
            echo "Quiet hours: sleeping $wait s until $QUIET_END $QUIET_TZ ..."
            sleep $wait
          }

          TEST_MODE="${INPUT_TEST_MODE:-0}"
          TEST_LOOP="${INPUT_TEST_LOOP:-0}"
          echo "TEST_MODE=$TEST_MODE  TEST_LOOP=$TEST_LOOP"
          python -c 'import os;print("PY DEBUG_SNAPSHOT=",os.getenv("DEBUG_SNAPSHOT"));print("PY USE_PLAYWRIGHT=",os.getenv("USE_PLAYWRIGHT"))'

          git config user.email "actions@users.noreply.github.com"
          git config user.name "github-actions"

          run_one () {
            rm -f last_response.html last_response.png after_submit.png run.log || true
            # stderr -> stdout
            python checker.py 2>&1 | tee run.log || true

            # als state is gewijzigd, committen
            if grep -q "STATE_CHANGED=1" run.log; then
              git pull --rebase || true
              git add state.json
              git commit -m "Update state [skip ci]" || true
              git push || true
            fi

            # test heartbeat
            if [ "$TEST_MODE" = "1" ] || [ "$TEST_MODE" = "true" ] || [ "$TEST_MODE" = "yes" ]; then
              if ! grep -q "STATE_CHANGED=1" run.log; then
                STATUS_LINE=$(grep -E '^Status:' run.log | tail -n1 || true)
                STATUS_TEXT="${STATUS_LINE#Status: }"
                MSG="[TEST] Geen verandering (${STATUS_TEXT:-onbekend}) @ $(date -u +%F' '%T) UTC"
                curl -sS -X POST \
                  -d "chat_id=${TELEGRAM_CHAT_ID}" \
                  -d "text=${MSG}" \
                  "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" >/dev/null || true
              fi
            fi
          }

          if [ "$TEST_LOOP" = "1" ]; then
            echo "::group::check 1/1"
            if in_quiet; then echo "In quiet hours â†’ single sleep until end"; sleep_until_quiet_end; fi
            run_one
            echo "::endgroup::"
          else
            # +- 5u30 (19800s)
            END=$(( $(date +%s) + 19800 ))
            while [ $(date +%s) -lt $END ]; do
              if in_quiet; then sleep_until_quiet_end; continue; fi
              echo "::group::check @ $(date -u +%F' '%T) UTC"
              run_one
              echo "::endgroup::"
              random_sleep
            done
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: last_response
          path: |
            last_response.html
            last_response.png
            after_submit.png
            run.log
          if-no-files-found: ignore

      - name: Self-dispatch next daemon run (skip in TEST_LOOP)
        if: ${{ github.event.inputs.test_loop == '0' }}
        env:
            GH_OWNER_REPO: ${{ github.repository }}
            GH_TOKEN: ${{ github.token }}
            REF_NAME: ${{ github.ref_name }}
            INPUT_TEST_MODE: ${{ github.event.inputs.test_mode }}
        run: |
          PAYLOAD=$(printf '{"ref":"%s","inputs":{"test_mode":"%s","test_loop":"0"}}' "$REF_NAME" "${INPUT_TEST_MODE:-0}")
          curl -sS -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/${GH_OWNER_REPO}/actions/workflows/check_daemon.yml/dispatches" || true
